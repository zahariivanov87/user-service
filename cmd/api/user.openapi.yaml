---
openapi: 3.0.0
info:
  description: API for users.
  version: 1.0.0
  title: Users Management
  contact:
    name: API Support
    email: zahariivanov87@gmail.com
paths:
  /api/public/v1/users:
    post:
      summary: Create user.
      description: Creates user from provided payload.
      operationId: user_create
      responses:
        200:
          description: User has been created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyJson"
        400:
          $ref: "definitions/responses.yaml#/BadRequest"
        500:
          $ref: "definitions/responses.yaml#/InternalServerError"
      requestBody:
        description: User properties.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForCreate"
            
  //api/public/v1/users:
    get:
      summary: Retrieves a slice of users.
      description: Fetch slice of users by given criteria.
      operationId: user_get_all
      responses:
        200:
          description: Slice of users have been fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyJson"
        400:
          $ref: "definitions/responses.yaml#/BadRequest"
        500:
          $ref: "definitions/responses.yaml#/InternalServerError"
      parameters:
        - name: limit
          in: query 
          schema:
            type: integer
            example: 50
        - name: previous_page
          in: query 
          schema:
            type: string
            example: MjAyMi0xLTkgMTM6MzQ6MzAsZGEwZTM
        - name: next_page
          in: query 
          schema:
            type: string
            example: MjAyMi0xLTkgMTM6MzQ6MzAsZGEwZTM
        - name: country
          in: query 
          schema:
            type: string
            example: BG
        - name: nickname
          in: query 
          schema:
            type: string
            example: jdoe
        - name: first_name
          in: query 
          schema:
            type: string
            example: John
        - name: last_name
          in: query 
          schema:
            type: string
            example: Doe
            
  /api/public/v1/users/{userID}:
    put:
      summary: Updates user.
      description: Updates user from provided payload.
      operationId: user_update
      responses:
        200:
          description: User has been updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyJson"
        400:
          $ref: "definitions/responses.yaml#/BadRequest"
        500:
          $ref: "definitions/responses.yaml#/InternalServerError"
      requestBody:
        description: User properties.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForUpdate"
  /api/public/v1/users/{userid}:
    delete:
      summary: Deletes user.
      description: Deletes user for provided identity.
      operationId: user_delete
      responses:
        200:
          description: User has been deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyJson"
        400:
          $ref: "definitions/responses.yaml#/BadRequest"
        500:
          $ref: "definitions/responses.yaml#/InternalServerError"

components:
  schemas:
    UserForCreate:
      description: User payload needed for creation.
      type: object
      properties:
        first_name:
          description: First name of the user.
          type: string
          example: "John"
        last_name:
          description: Last name of the user.
          type: string
          example: "Doe"
        nickname:
          description: Nickname of the user.
          type: string
          example: "jdoe"
        email:
          description: Email of the user.
          type: string
          example: "jdoe@gmail.com"
        password:
          description: Password of the user.
          type: string
          example: "mysecretpassword"
        country:
          description: Country of the user.
          type: string
          example: "BG"
    UserForUpdate:
        description: Batch.
        allOf:
          - $ref: "#/components/schemas/UserForCreate"
          - type: object
            properties:
              id:
                description: ID of the user.
                type: string
                format: UUID
    
    EmptyJson:
      description: Empty json response.
      type: object