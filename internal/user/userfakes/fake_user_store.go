// Code generated by counterfeiter. DO NOT EDIT.
package userfakes

import (
	"context"
	"sync"

	"com.user.com/user/internal/core"
	"com.user.com/user/internal/user"
	"github.com/google/uuid"
)

type FakeUserStore struct {
	DeleteUserStub        func(context.Context, uuid.UUID) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteUserReturns struct {
		result1 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllUsersStub        func(context.Context, core.UserFilter) ([]*core.User, string, string, int, error)
	getAllUsersMutex       sync.RWMutex
	getAllUsersArgsForCall []struct {
		arg1 context.Context
		arg2 core.UserFilter
	}
	getAllUsersReturns struct {
		result1 []*core.User
		result2 string
		result3 string
		result4 int
		result5 error
	}
	getAllUsersReturnsOnCall map[int]struct {
		result1 []*core.User
		result2 string
		result3 string
		result4 int
		result5 error
	}
	SaveUserStub        func(context.Context, core.User) error
	saveUserMutex       sync.RWMutex
	saveUserArgsForCall []struct {
		arg1 context.Context
		arg2 core.User
	}
	saveUserReturns struct {
		result1 error
	}
	saveUserReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateUserStub        func(context.Context, core.User) error
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 core.User
	}
	updateUserReturns struct {
		result1 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserStore) DeleteUser(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteUserStub
	fakeReturns := fake.deleteUserReturns
	fake.recordInvocation("DeleteUser", []interface{}{arg1, arg2})
	fake.deleteUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserStore) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeUserStore) DeleteUserCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeUserStore) DeleteUserArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserStore) DeleteUserReturns(result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) DeleteUserReturnsOnCall(i int, result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) GetAllUsers(arg1 context.Context, arg2 core.UserFilter) ([]*core.User, string, string, int, error) {
	fake.getAllUsersMutex.Lock()
	ret, specificReturn := fake.getAllUsersReturnsOnCall[len(fake.getAllUsersArgsForCall)]
	fake.getAllUsersArgsForCall = append(fake.getAllUsersArgsForCall, struct {
		arg1 context.Context
		arg2 core.UserFilter
	}{arg1, arg2})
	stub := fake.GetAllUsersStub
	fakeReturns := fake.getAllUsersReturns
	fake.recordInvocation("GetAllUsers", []interface{}{arg1, arg2})
	fake.getAllUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *FakeUserStore) GetAllUsersCallCount() int {
	fake.getAllUsersMutex.RLock()
	defer fake.getAllUsersMutex.RUnlock()
	return len(fake.getAllUsersArgsForCall)
}

func (fake *FakeUserStore) GetAllUsersCalls(stub func(context.Context, core.UserFilter) ([]*core.User, string, string, int, error)) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = stub
}

func (fake *FakeUserStore) GetAllUsersArgsForCall(i int) (context.Context, core.UserFilter) {
	fake.getAllUsersMutex.RLock()
	defer fake.getAllUsersMutex.RUnlock()
	argsForCall := fake.getAllUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserStore) GetAllUsersReturns(result1 []*core.User, result2 string, result3 string, result4 int, result5 error) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = nil
	fake.getAllUsersReturns = struct {
		result1 []*core.User
		result2 string
		result3 string
		result4 int
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *FakeUserStore) GetAllUsersReturnsOnCall(i int, result1 []*core.User, result2 string, result3 string, result4 int, result5 error) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = nil
	if fake.getAllUsersReturnsOnCall == nil {
		fake.getAllUsersReturnsOnCall = make(map[int]struct {
			result1 []*core.User
			result2 string
			result3 string
			result4 int
			result5 error
		})
	}
	fake.getAllUsersReturnsOnCall[i] = struct {
		result1 []*core.User
		result2 string
		result3 string
		result4 int
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *FakeUserStore) SaveUser(arg1 context.Context, arg2 core.User) error {
	fake.saveUserMutex.Lock()
	ret, specificReturn := fake.saveUserReturnsOnCall[len(fake.saveUserArgsForCall)]
	fake.saveUserArgsForCall = append(fake.saveUserArgsForCall, struct {
		arg1 context.Context
		arg2 core.User
	}{arg1, arg2})
	stub := fake.SaveUserStub
	fakeReturns := fake.saveUserReturns
	fake.recordInvocation("SaveUser", []interface{}{arg1, arg2})
	fake.saveUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserStore) SaveUserCallCount() int {
	fake.saveUserMutex.RLock()
	defer fake.saveUserMutex.RUnlock()
	return len(fake.saveUserArgsForCall)
}

func (fake *FakeUserStore) SaveUserCalls(stub func(context.Context, core.User) error) {
	fake.saveUserMutex.Lock()
	defer fake.saveUserMutex.Unlock()
	fake.SaveUserStub = stub
}

func (fake *FakeUserStore) SaveUserArgsForCall(i int) (context.Context, core.User) {
	fake.saveUserMutex.RLock()
	defer fake.saveUserMutex.RUnlock()
	argsForCall := fake.saveUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserStore) SaveUserReturns(result1 error) {
	fake.saveUserMutex.Lock()
	defer fake.saveUserMutex.Unlock()
	fake.SaveUserStub = nil
	fake.saveUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) SaveUserReturnsOnCall(i int, result1 error) {
	fake.saveUserMutex.Lock()
	defer fake.saveUserMutex.Unlock()
	fake.SaveUserStub = nil
	if fake.saveUserReturnsOnCall == nil {
		fake.saveUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) UpdateUser(arg1 context.Context, arg2 core.User) error {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 core.User
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserStore) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserStore) UpdateUserCalls(stub func(context.Context, core.User) error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserStore) UpdateUserArgsForCall(i int) (context.Context, core.User) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserStore) UpdateUserReturns(result1 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) UpdateUserReturnsOnCall(i int, result1 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.getAllUsersMutex.RLock()
	defer fake.getAllUsersMutex.RUnlock()
	fake.saveUserMutex.RLock()
	defer fake.saveUserMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.UserStore = new(FakeUserStore)
